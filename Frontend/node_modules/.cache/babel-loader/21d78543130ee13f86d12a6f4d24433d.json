{"ast":null,"code":"import _classCallCheck from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/src/components/TaskList/TaskList.js\";\nimport React, { Component } from 'react';\nimport Tasks from './Tasks/Tasks.js';\nimport TaskInfo from './TaskInfo/TaskInfo.js';\nimport SignOut from '../SignOut/SignOut.js';\nimport MarkBtn from './MarkBtn/MarkBtn.js';\nimport FilterBox from './FilterBox/FilterBox.js';\nimport './TaskList.css';\n\nvar TaskList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskList, _Component);\n\n  function TaskList(props) {\n    var _this;\n\n    _classCallCheck(this, TaskList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskList).call(this, props));\n\n    _this.handleAddEvent = function () {\n      var id = (+new Date() + Math.floor(Math.random() * 999999)).toString();\n      fetch('http://localhost:3000/Tasks', {\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          id: id,\n          name: '',\n          description: '',\n          complete: ''\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this.setState({\n          Tasks: data\n        });\n      });\n    };\n\n    _this.handleAddSection = function () {\n      var id = 'section' + Math.floor(Math.random() * 1000);\n      fetch('http://localhost:3000/Tasks', {\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          id: id,\n          name: '---Section---',\n          description: '',\n          complete: ''\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this.setState({\n          Tasks: data\n        });\n      });\n    };\n\n    _this.handleTask = function (e) {\n      var id = e.target.id;\n      var name = e.target.name;\n\n      _this.setState({\n        clickedTaskId: id\n      });\n\n      fetch('http://localhost:3000/TasksName', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: _this.state.clickedTask.id,\n          name: _this.state.clickedTask.name\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return _this.setState({\n          Tasks: data\n        });\n      });\n    };\n\n    _this.getName = function (e) {\n      var id = e.target.id;\n      var Tasks = _this.state.Tasks;\n      var id_array = Tasks.map(function (Task) {\n        return Task.id;\n      });\n      var order = id_array.indexOf(id);\n      var clickedTask = _this.state.Tasks[order];\n      _this.state.clickedTask = clickedTask;\n\n      _this.setState(_this.state.clickedTask);\n    };\n\n    _this.getDescription = function (e) {\n      var id = e.target.id;\n      var newTask = _this.state.clickedTask;\n      newTask.description = e.target.value;\n\n      _this.setState({\n        clickedTask: newTask\n      });\n\n      fetch('http://localhost:3000/TasksDescription', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: _this.state.clickedTask.id,\n          description: _this.state.clickedTask.description\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        console.log(data);\n\n        _this.setState(_this.state.Tasks);\n\n        console.log(_this.state);\n      });\n    };\n\n    _this.toggleComplete = function (e) {\n      var Class = e.target.className;\n      var newTask = _this.state.clickedTask;\n\n      if (newTask.complete == true) {\n        newTask.complete = false;\n\n        _this.setState({\n          clickedTask: newTask\n        });\n      } else if (newTask.complete == false) {\n        newTask.complete = true;\n\n        _this.setState({\n          clickedTask: newTask\n        });\n      }\n\n      fetch('http://localhost:3000/TasksComplete', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: _this.state.clickedTask.id,\n          complete: _this.state.clickedTask.complete\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        console.log(data);\n\n        _this.setState(_this.state.Tasks);\n\n        console.log(_this.state);\n      });\n    };\n\n    _this.filterText = function (e) {\n      var filterInput = e.target.value;\n\n      _this.setState({\n        filterText: filterInput\n      });\n    };\n\n    _this.state = {\n      Tasks: [],\n      clickedTask: {\n        id: '',\n        name: '',\n        description: '',\n        complete: ''\n      },\n      filterText: '',\n      clickedTaskId: '',\n      clickedTaskName: ''\n    };\n    return _this;\n  }\n\n  _createClass(TaskList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('http://localhost:3000/Tasks').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this2.setState({\n          Tasks: data\n        });\n      });\n    } //Event of adding new Task in the Tasktable\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"Window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Project-Panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"User\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"Project-List\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"SignOut\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(SignOut, {\n        onRouteChange: this.props.onRouteChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"TaskListDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"Tasks-header-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"addBtn\",\n        onClick: this.handleAddEvent.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"New Task\"), React.createElement(\"button\", {\n        className: \"sectionBtn\",\n        onClick: this.handleAddSection.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"New Section\"), React.createElement(FilterBox, {\n        filterText: this.filterText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"Tasks\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Tasks, {\n        Tasks: this.state.Tasks,\n        onTaskUpdate: this.handleTask.bind(this),\n        onTaskInfo: this.getName.bind(this),\n        filterText: this.state.filterText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"TaskInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"TaskInfo-header-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(MarkBtn, {\n        clickedTask: this.state.clickedTask,\n        toggleComplete: this.toggleComplete.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })), React.createElement(TaskInfo, {\n        clickedTask: this.state.clickedTask,\n        onTaskUpdate: this.handleTask.bind(this),\n        getDescription: this.getDescription.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TaskList;\n}(Component);\n\nexport default TaskList;","map":{"version":3,"sources":["/Users/Che-Yikung/Desktop/Project-todolist/Frontend/src/components/TaskList/TaskList.js"],"names":["React","Component","Tasks","TaskInfo","SignOut","MarkBtn","FilterBox","TaskList","props","handleAddEvent","id","Date","Math","floor","random","toString","fetch","method","headers","body","JSON","stringify","name","description","complete","then","response","json","data","setState","handleAddSection","handleTask","e","target","clickedTaskId","state","clickedTask","getName","id_array","map","Task","order","indexOf","getDescription","newTask","value","res","console","log","toggleComplete","Class","className","filterText","filterInput","clickedTaskName","onRouteChange","bind"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Tasks from './Tasks/Tasks.js';\nimport TaskInfo from './TaskInfo/TaskInfo.js';\nimport SignOut from '../SignOut/SignOut.js';\nimport MarkBtn from './MarkBtn/MarkBtn.js';\nimport FilterBox from './FilterBox/FilterBox.js';\nimport './TaskList.css';\n\nclass TaskList extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            Tasks: [],\n\n            clickedTask: {\n                id: '',\n                name: '',\n                description: '',\n                complete: '',\n            },\n\n            filterText: '',\n\n            clickedTaskId: '',\n            clickedTaskName: '',\n        }\n    }\n\n    componentDidMount(){\n        fetch('http://localhost:3000/Tasks')\n            .then(res => res.json())\n            .then(data => {\n                this.setState({ Tasks: data })})\n    }\n\n    //Event of adding new Task in the Tasktable\n    handleAddEvent = () => {\n        var id = (+ new Date() + Math.floor(Math.random() * 999999)).toString();\n        \n        fetch('http://localhost:3000/Tasks', {\n            method: 'post',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                id: id,\n                name: '',\n                description: '',\n                complete: '',\n            }) \n        })\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ Tasks: data })\n            })\n    }\n\n    //Event of adding new section in the Tasktable\n    handleAddSection = () => {\n        var id = ('section'+ Math.floor(Math.random() * 1000));\n        \n        fetch('http://localhost:3000/Tasks', {\n            method: 'post',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                id: id,\n                name: '---Section---',\n                description: '',\n                complete: '',\n            }) \n        })\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ Tasks: data })\n            })\n    }\n\n    //Event of editing the selected task\n    handleTask = (e) => {\n        var id = e.target.id;\n        var name = e.target.name;\n\n        this.setState({ clickedTaskId: id })\n\n       fetch('http://localhost:3000/TasksName', {\n           method: 'put',\n           headers: { 'Content-Type': 'application/json' },\n           body: JSON.stringify({\n               id: this.state.clickedTask.id,\n               name: this.state.clickedTask.name,\n           })\n        })\n            .then(response => response.json())\n            .then(data => {\n                return this.setState({Tasks : data })\n            })\n        \n    }\n\n    //get the name of the selected task\n    getName = (e) => {\n       var id = e.target.id;\n       var Tasks = this.state.Tasks;\n       var id_array = Tasks.map(\n           function (Task){\n               return Task.id\n           }\n       )\n\n       var order = id_array.indexOf(id);\n\n       var clickedTask = this.state.Tasks[order];\n       this.state.clickedTask = clickedTask;\n       this.setState(this.state.clickedTask);\n    }\n\n\n    //get the description of the selected Task\n    getDescription = (e) => {\n        var id = e.target.id;\n        var newTask = this.state.clickedTask;\n        \n        newTask.description = e.target.value;\n        \n        this.setState({ clickedTask: newTask });   \n\n        fetch('http://localhost:3000/TasksDescription', {\n            method: 'put',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                id: this.state.clickedTask.id,\n                description: this.state.clickedTask.description,\n            })\n         })\n             .then(res => res.json())\n             .then(data => {\n                 console.log(data);\n                 this.setState(this.state.Tasks);\n                 console.log(this.state);\n             })\n    }\n    \n    //function of toggling the selected Task to completed or incomplete\n    toggleComplete = (e) => {\n        var Class = e.target.className;\n        var newTask = this.state.clickedTask;\n        \n        if (newTask.complete == true){\n            newTask.complete = false;\n            this.setState({ clickedTask: newTask });\n        } else if (newTask.complete == false){\n            newTask.complete = true;\n            this.setState({ clickedTask: newTask });\n        }\n\n        fetch('http://localhost:3000/TasksComplete', {\n            method: 'put',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                id: this.state.clickedTask.id,\n                complete: this.state.clickedTask.complete,\n            })\n         })\n             .then(res => res.json())\n             .then(data => {\n                 console.log(data);\n                 this.setState(this.state.Tasks);\n                 console.log(this.state);\n             })\n    }\n\n    //function of filtering tasks by input keyword\n    filterText = (e) => {\n        var filterInput = e.target.value;\n        this.setState({ filterText: filterInput })\n    }\n\n    render(){\n        return (\n            <div className='Window'>\n                <div className='Project-Panel'>\n                    <div className='User'></div>\n                    <div className='Project-List'></div>\n                </div>\n                <div className='SignOut'>\n                        <SignOut onRouteChange={this.props.onRouteChange}/>\n                </div>\n                    <div className='TaskListDiv'>\n                        <header className='Tasks-header-table'>                    \n                            <button className='addBtn' onClick={this.handleAddEvent.bind(this)}>New Task</button>\n                            <button className='sectionBtn' onClick={this.handleAddSection.bind(this)}>New Section</button>\n                            <FilterBox filterText={this.filterText}/>\n                        </header>\n                        <div className='Tasks'>\n                            <Tasks\n                                Tasks={this.state.Tasks} \n                                onTaskUpdate={this.handleTask.bind(this)} \n                                onTaskInfo={this.getName.bind(this)}\n                                filterText={this.state.filterText}\n                            />\n                        </div>\n                    </div>  \n                    <div className='TaskInfo'>\n                        <header className='TaskInfo-header-table'>\n                            <MarkBtn clickedTask={this.state.clickedTask} toggleComplete={this.toggleComplete.bind(this)} />\n                        </header>\n                        <TaskInfo \n                            clickedTask={this.state.clickedTask} \n                            onTaskUpdate={this.handleTask.bind(this)} \n                            getDescription={this.getDescription.bind(this)}\n                        />\n                    </div>\n            </div>\n        )\n    }\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}