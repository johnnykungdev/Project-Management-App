{"ast":null,"code":"import _classCallCheck from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/src/components/TaskList/Tasks/TaskRow/EditableCell/EditableCell.js\";\nimport React, { Component } from 'react';\nimport './Task.css';\n\nvar EditableCell =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditableCell, _Component);\n\n  function EditableCell() {\n    _classCallCheck(this, EditableCell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EditableCell).apply(this, arguments));\n  }\n\n  _createClass(EditableCell, [{\n    key: \"render\",\n    value: function render() {\n      var onTaskUpdate = this.props.onTaskUpdate;\n      var onTaskInfo = this.props.onTaskInfo;\n      var Task = this.props.Task;\n      var complete = Task.complete;\n\n      if (complete == 1) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        })), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"Task\",\n          id: this.props.id,\n          value: this.props.name,\n          onChange: onTaskUpdate,\n          onClick: onTaskInfo,\n          placeholder: \"Enter the Task Name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        })), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"Task\",\n          id: this.props.id,\n          value: this.props.name,\n          onChange: onTaskUpdate,\n          onClick: onTaskInfo,\n          placeholder: \"Enter the Task Name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return EditableCell;\n}(Component);\n/*\nclass EditableCell extends Component {\n        \n    render(){\n        var onTaskUpdate = this.props.onTaskUpdate;\n        var onTaskInfo = this.props.onTaskInfo;\n\n        return (\n            <div>\n                <input \n                    type='text'\n                    className='Task'\n                    id={this.props.id}\n                    value={this.props.name}\n                    onChange={onTaskUpdate}\n                    onClick={onTaskInfo}\n                    placeholder='Enter the Task Name'\n                />\n            </div>\n        )\n    }\n} \n*/\n\n\nexport default EditableCell;","map":{"version":3,"sources":["/Users/Che-Yikung/Desktop/Project-todolist/Frontend/src/components/TaskList/Tasks/TaskRow/EditableCell/EditableCell.js"],"names":["React","Component","EditableCell","onTaskUpdate","props","onTaskInfo","Task","complete","id","name"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,YAAP;;IAEMC,Y;;;;;;;;;;;;;6BACM;AACJ,UAAIC,YAAY,GAAG,KAAKC,KAAL,CAAWD,YAA9B;AACA,UAAIE,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAA5B;AACA,UAAIC,IAAI,GAAG,KAAKF,KAAL,CAAWE,IAAtB;AACA,UAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;;AAEA,UAAGA,QAAQ,IAAG,CAAd,EAAgB;AACZ,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,OAAO,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,EAIA;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,SAAS,EAAC,MAFd;AAGI,UAAA,EAAE,EAAE,KAAKH,KAAL,CAAWI,EAHnB;AAII,UAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,IAJtB;AAKI,UAAA,QAAQ,EAAEN,YALd;AAMI,UAAA,OAAO,EAAEE,UANb;AAOI,UAAA,WAAW,EAAC,qBAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJA,CADJ;AAgBH,OAjBD,MAiBO;AACH,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,EAIA;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,SAAS,EAAC,MAFd;AAGI,UAAA,EAAE,EAAE,KAAKD,KAAL,CAAWI,EAHnB;AAII,UAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,IAJtB;AAKI,UAAA,QAAQ,EAAEN,YALd;AAMI,UAAA,OAAO,EAAEE,UANb;AAOI,UAAA,WAAW,EAAC,qBAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJA,CADJ;AAgBH;AAEJ;;;;EA3CsBJ,S;AA8C3B;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,eAAeC,YAAf","sourcesContent":["import React, {Component} from 'react';\nimport './Task.css';\n\nclass EditableCell extends Component {\n    render(){\n        var onTaskUpdate = this.props.onTaskUpdate;\n        var onTaskInfo = this.props.onTaskInfo;\n        var Task = this.props.Task;\n        var complete = Task.complete;\n\n        if(complete ==1){\n            return (\n                <div>\n                    <label>\n                        <input type=\"checkbox\" checked />\n                    </label>\n                <input \n                    type='text'\n                    className='Task'\n                    id={this.props.id}\n                    value={this.props.name}\n                    onChange={onTaskUpdate}\n                    onClick={onTaskInfo}\n                    placeholder='Enter the Task Name'\n                />\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <label>\n                        <input type=\"checkbox\" />\n                    </label>\n                <input \n                    type='text'\n                    className='Task'\n                    id={this.props.id}\n                    value={this.props.name}\n                    onChange={onTaskUpdate}\n                    onClick={onTaskInfo}\n                    placeholder='Enter the Task Name'\n                />\n                </div>\n            )\n        }\n\n    }\n}\n\n/*\nclass EditableCell extends Component {\n        \n    render(){\n        var onTaskUpdate = this.props.onTaskUpdate;\n        var onTaskInfo = this.props.onTaskInfo;\n\n        return (\n            <div>\n                <input \n                    type='text'\n                    className='Task'\n                    id={this.props.id}\n                    value={this.props.name}\n                    onChange={onTaskUpdate}\n                    onClick={onTaskInfo}\n                    placeholder='Enter the Task Name'\n                />\n            </div>\n        )\n    }\n} \n*/\n\nexport default EditableCell;"]},"metadata":{},"sourceType":"module"}