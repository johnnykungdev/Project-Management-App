{"ast":null,"code":"import _classCallCheck from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Che-Yikung/Desktop/Project-todolist/Frontend/src/components/TaskList/TaskList.js\";\nimport React, { Component } from 'react';\nimport Tasks from './Tasks/Tasks.js';\nimport TaskInfo from './TaskInfo/TaskInfo.js';\nimport SignOut from '../SignOut/SignOut.js';\nimport MarkBtn from './MarkBtn/MarkBtn.js';\nimport FilterBox from './FilterBox/FilterBox.js';\nimport ProjectList from './\bProjectList/ProjectList.js';\nimport AddProjectMember from './AddProjectMember/AddProjectMember.js';\nimport './TaskList.css';\n\nvar TaskList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskList, _Component);\n\n  function TaskList(props) {\n    var _this;\n\n    _classCallCheck(this, TaskList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskList).call(this, props));\n\n    _this.loadProjectList = function (user) {\n      console.log(user);\n      fetch('http://localhost:3000/ProjectList', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: user\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (projectlist) {\n        _this.setState({\n          projectlist: projectlist\n        });\n\n        console.log(_this.state.projectlist);\n      }).catch(function (res) {\n        return res.json('err');\n      });\n    };\n\n    _this.validIsAdmin = function (user_identifier, project_identifier) {\n      fetch('http://localhost:3000/validIsAdmin', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_identifier: user_identifier,\n          project_identifier: project_identifier\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        var onProject_isAdmin = data[0].isAdmin;\n\n        _this.setState({\n          onProject_isAdmin: onProject_isAdmin\n        });\n\n        console.log(_this.state.onProject_isAdmin);\n      });\n    };\n\n    _this.loadTask = function (user_identifier, project_identifier) {\n      fetch('http://localhost:3000/getTask', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          project_identifier: project_identifier\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (Tasks) {\n        _this.setState({\n          Tasks: Tasks\n        });\n\n        _this.setState({\n          onProject_identifier: project_identifier\n        });\n\n        console.log(Tasks);\n      });\n    };\n\n    _this.AddNewProject = function () {\n      var project_identifier = +new Date() + 'project' + Math.floor(Math.random() * 99999999999);\n      var user = _this.props.user;\n      fetch('http://localhost:3000/Projects', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: user,\n          project_name: 'new project',\n          project_identifier: project_identifier\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n\n        _this.setState({\n          Projectlist: data\n        });\n      });\n    };\n\n    _this.handleProject = function (e) {\n      var project_identifier = e.target.id;\n      var name = e.target.value;\n      var user_identifier = _this.props.user.user_identifier;\n      fetch('http://localhost:3000/ProjectName', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_identifier: user_identifier,\n          project_identifier: project_identifier,\n          name: name\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (Projectlist) {\n        return _this.setState({\n          Projectlist: Projectlist\n        });\n      });\n    };\n\n    _this.handleAddEvent = function () {\n      var id = (+new Date() + Math.floor(Math.random() * 999999)).toString();\n      var onProject_identifier = _this.state.onProject_identifier;\n      fetch('http://localhost:3000/Tasks', {\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          onProject_identifier: onProject_identifier,\n          id: id,\n          name: '',\n          description: '',\n          complete: '0'\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        data.sort(function (a, b) {\n          return a.index - b.index;\n        });\n\n        _this.setState({\n          Tasks: data\n        });\n      });\n    };\n\n    _this.handleAddSection = function () {\n      var id = 'section' + Math.floor(Math.random() * 1000);\n      var onProject_identifier = _this.state.onProject_identifier;\n      fetch('http://localhost:3000/Tasks', {\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          onProject_identifier: onProject_identifier,\n          id: id,\n          name: '---Section---',\n          description: '',\n          complete: 0\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        data.sort(function (a, b) {\n          return a.index - b.index;\n        });\n\n        _this.setState({\n          Tasks: data\n        });\n      });\n    };\n\n    _this.handleTask = function (e) {\n      var id = e.target.id;\n      var name = e.target.value;\n      var onProject_identifier = _this.state.onProject_identifier;\n      console.log(id);\n      fetch('http://localhost:3000/TaskName', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          onProject_identifier: onProject_identifier,\n          id: id,\n          name: name\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (Tasks) {\n        var clickedTask = Tasks.find(function (Task) {\n          if (Task.id === id) {\n            return Task;\n          }\n\n          return false;\n        });\n\n        _this.setState({\n          Tasks: Tasks\n        });\n\n        _this.setState({\n          clickedTask: clickedTask\n        });\n      });\n    };\n\n    _this.getInfo = function (e) {\n      var id = e.target.id;\n      var onProject_identifier = _this.state.onProject_identifier;\n      fetch('http://localhost:3000/TaskInfo', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          onProject_identifier: onProject_identifier,\n          id: id\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (clickedTask) {\n        _this.setState({\n          clickedTask: clickedTask\n        });\n\n        console.log(_this.state.clickedTask);\n      });\n    };\n\n    _this.onHandleDescription = function (e) {\n      var id = e.target.id;\n      var description = e.target.value;\n      var onProject_identifier = _this.state.onProject_identifier;\n      fetch('http://localhost:3000/TaskDescription', {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          onProject_identifier: onProject_identifier,\n          id: id,\n          description: description\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (Tasks) {\n        var clickedTask = Tasks.find(function (Task) {\n          if (Task.id === id) {\n            return Task;\n          }\n\n          return false;\n        });\n\n        _this.setState({\n          Tasks: Tasks\n        });\n\n        _this.setState({\n          clickedTask: clickedTask\n        });\n      });\n    };\n\n    _this.toggleTaskComplete = function (e) {\n      var complete = _this.state.clickedTask.complete;\n      var id = _this.state.clickedTask.id;\n      var onProject_identifier = _this.state.onProject_identifier;\n      var toggle = '';\n\n      if (complete == 0) {\n        toggle = 1;\n      } else if (complete == 1) {\n        toggle = 0;\n      }\n\n      if (complete) {\n        fetch('http://localhost:3000/TaskComplete', {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            onProject_identifier: onProject_identifier,\n            id: id,\n            complete: toggle\n          })\n        }).then(function (response) {\n          return response.json();\n        }).then(function (Tasks) {\n          var clickedTask = Tasks.find(function (Task) {\n            if (Task.id === id) {\n              return Task;\n            }\n\n            return false;\n          });\n\n          _this.setState({\n            Tasks: Tasks\n          });\n\n          _this.setState({\n            clickedTask: clickedTask\n          });\n        });\n      } else {\n        return false;\n      }\n    };\n\n    _this.filterText = function (e) {\n      var filterInput = e.target.value;\n\n      _this.setState({\n        filterText: filterInput\n      });\n    };\n\n    _this.state = {\n      projectlist: [],\n      onProject_identifier: '',\n      onProject_isAdmin: '',\n      Tasks: [],\n      clickedTask: {\n        id: '',\n        name: '',\n        description: '',\n        complete: ''\n      },\n      filterText: ''\n    };\n    return _this;\n  }\n\n  _createClass(TaskList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var user = this.props.user;\n      this.loadProjectList(user);\n      console.log(this.state.projectlist);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"Window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Project-Panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"User\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, \"Hi, \", this.props.user.name), React.createElement(\"div\", {\n        className: \"NewProject\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.AddNewProject,\n        id: \"NewProjectBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"New Project\")), React.createElement(ProjectList, {\n        user: this.props.user,\n        projectlist: this.state.projectlist,\n        validIsAdmin: this.validIsAdmin,\n        loadTask: this.loadTask,\n        handleProject: this.handleProject,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"AddMember\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(AddProjectMember, {\n        user: this.props.user,\n        onProject_identifier: this.state.project_identifier,\n        onProject_isAdmin: this.state.onProject_isAdmin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"SignOut\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(SignOut, {\n        onRouteChange: this.props.onRouteChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"TaskListDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"Tasks-header-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"addBtn\",\n        onClick: this.handleAddEvent.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, \"New Task\"), React.createElement(\"button\", {\n        className: \"sectionBtn\",\n        onClick: this.handleAddSection.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"New Section\"), React.createElement(FilterBox, {\n        filterText: this.filterText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"Tasks\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(Tasks, {\n        Tasks: this.state.Tasks,\n        onTaskUpdate: this.handleTask.bind(this),\n        onTaskInfo: this.getInfo.bind(this),\n        filterText: this.state.filterText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"TaskInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"TaskInfo-header-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, React.createElement(MarkBtn, {\n        clickedTask: this.state.clickedTask,\n        toggleTaskComplete: this.toggleTaskComplete.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      })), React.createElement(TaskInfo, {\n        clickedTask: this.state.clickedTask,\n        onTaskUpdate: this.handleTask.bind(this),\n        onHandleDescription: this.onHandleDescription.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TaskList;\n}(Component);\n\nexport default TaskList;","map":{"version":3,"sources":["/Users/Che-Yikung/Desktop/Project-todolist/Frontend/src/components/TaskList/TaskList.js"],"names":["React","Component","Tasks","TaskInfo","SignOut","MarkBtn","FilterBox","ProjectList","AddProjectMember","TaskList","props","loadProjectList","user","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","projectlist","setState","state","catch","res","validIsAdmin","user_identifier","project_identifier","data","onProject_isAdmin","isAdmin","loadTask","onProject_identifier","AddNewProject","Date","Math","floor","random","project_name","Projectlist","handleProject","e","target","id","name","value","handleAddEvent","toString","description","complete","sort","a","b","index","handleAddSection","handleTask","clickedTask","find","Task","getInfo","onHandleDescription","toggleTaskComplete","toggle","filterText","filterInput","onRouteChange","bind"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Tasks from './Tasks/Tasks.js';\nimport TaskInfo from './TaskInfo/TaskInfo.js';\nimport SignOut from '../SignOut/SignOut.js';\nimport MarkBtn from './MarkBtn/MarkBtn.js';\nimport FilterBox from './FilterBox/FilterBox.js';\nimport ProjectList from './\bProjectList/ProjectList.js';\nimport AddProjectMember from './AddProjectMember/AddProjectMember.js';\nimport './TaskList.css';\n\nclass TaskList extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            projectlist: [],\n            onProject_identifier: '',\n            onProject_isAdmin: '',\n            Tasks: [],\n\n            clickedTask: {\n                id: '',\n                name: '',\n                description: '',\n                complete: '',\n            },\n\n            filterText: '',\n        }\n    }\n\n    componentDidMount(){\n        var user = this.props.user;\n        this.loadProjectList(user);\n        console.log(this.state.projectlist);\n    }\n\n    loadProjectList = (user) => {\n        console.log(user);\n        fetch('http://localhost:3000/ProjectList', {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                user\n            })\n        })\n        .then(response => response.json())\n        .then(projectlist => {this.setState({ projectlist })\n            console.log(this.state.projectlist)}\n        )\n        .catch(res=>res.json('err'))\n    }\n\n    validIsAdmin = (user_identifier, project_identifier) => {\n        fetch('http://localhost:3000/validIsAdmin', {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                user_identifier,\n                project_identifier\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            var onProject_isAdmin = data[0].isAdmin;\n            this.setState({ onProject_isAdmin })\n            console.log(this.state.onProject_isAdmin)\n        })\n    }\n\n    loadTask = ( user_identifier,project_identifier) => {\n\n        fetch('http://localhost:3000/getTask', {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                project_identifier\n            })\n        })\n        .then(response => response.json())\n        .then(Tasks => {\n            this.setState({ Tasks });\n            this.setState({ onProject_identifier: project_identifier });\n            console.log(Tasks)});\n    }\n\n    AddNewProject = () => {\n        var project_identifier = (+ new Date() + 'project' + Math.floor( Math.random() * 99999999999 ));\n        var user = this.props.user;\n\n        fetch('http://localhost:3000/Projects',{\n            method: 'post',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                user,\n                project_name: 'new project',\n                project_identifier,\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n            this.setState({ Projectlist: data });\n        })\n    }\n\n    handleProject = (e) => {\n        var project_identifier = e.target.id;\n        var name = e.target.value;\n        var user_identifier = this.props.user.user_identifier;\n\n        fetch('http://localhost:3000/ProjectName', {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                user_identifier,\n                project_identifier,\n                name\n            })\n        })\n        .then(response => response.json())\n        .then(Projectlist => this.setState({ Projectlist }))\n    }\n\n    //Event of adding new Task in the Tasktable\n    handleAddEvent = () => {\n        var id = (+ new Date() + Math.floor(Math.random() * 999999)).toString();\n        var onProject_identifier = this.state.onProject_identifier;\n        \n        fetch('http://localhost:3000/Tasks', {\n            method: 'post',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                onProject_identifier,\n                id,\n                name: '',\n                description: '',\n                complete: '0',\n            }) \n        })\n            .then(response => response.json())\n            .then(data => {\n                data.sort(function(a, b){\n                    return a.index - b.index;\n                })\n\n                this.setState({ Tasks: data})\n            })\n    }\n\n    //Event of adding new section in the Tasktable\n    handleAddSection = () => {\n        var id = ('section'+ Math.floor(Math.random() * 1000));\n        var onProject_identifier = this.state.onProject_identifier;\n        \n        fetch('http://localhost:3000/Tasks', {\n            method: 'post',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                onProject_identifier,\n                id: id,\n                name: '---Section---',\n                description: '',\n                complete: 0,\n            }) \n        })\n            .then(response => response.json())\n            .then(data => {\n                data.sort(function(a, b){\n                    return a.index - b.index;\n                })\n                this.setState({ Tasks: data})\n            })\n    }\n\n    //Event of editing the selected task\n    handleTask = (e) => {\n        var id = e.target.id;\n        var name = e.target.value;\n        var onProject_identifier = this.state.onProject_identifier;\n        console.log(id);\n\n        fetch('http://localhost:3000/TaskName', {\n           method: 'put',\n           headers: { 'Content-Type': 'application/json' },\n           body: JSON.stringify({\n               onProject_identifier,\n               id: id,\n               name: name,\n           })\n        })\n            .then(response => response.json())\n            .then(Tasks => {\n                var clickedTask = Tasks.find(\n                    (Task) => {\n                        if(Task.id === id){\n                            return Task;\n                        }\n                        return false;\n                    }\n                )\n\n                this.setState({Tasks});\n                this.setState({clickedTask})\n\n            })\n    }\n\n    //get the name of the selected task and show on the title bar in the task info\n    getInfo = (e) => {\n        var id = e.target.id;\n        var onProject_identifier = this.state.onProject_identifier;\n\n        fetch('http://localhost:3000/TaskInfo', {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                onProject_identifier,\n                id\n            })\n        })\n            .then(response => response.json())\n            .then(clickedTask => {\n                this.setState({ clickedTask })\n                console.log(this.state.clickedTask);\n            })\n    }\n\n    //get the description of the selected Task\n    onHandleDescription = (e) => {\n        var id = e.target.id;\n        var description = e.target.value;\n        var onProject_identifier = this.state.onProject_identifier;\n\n        fetch('http://localhost:3000/TaskDescription', {\n            method: 'put',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                onProject_identifier,\n                id,\n                description\n            })\n        })\n            .then(response => response.json())\n            .then(Tasks => {\n                var clickedTask = Tasks.find(\n                    (Task) => {\n                        if(Task.id === id){\n                            return Task;\n                        }\n                        return false;\n                    }\n                )\n\n                this.setState({Tasks});\n                this.setState({clickedTask})\n            })\n    }\n\n    \n    //function of toggling the selected Task to completed or incomplete\n    toggleTaskComplete = (e) => {\n        var complete = this.state.clickedTask.complete;\n        var id =this.state.clickedTask.id;\n        var onProject_identifier = this.state.onProject_identifier;\n        var toggle = '';\n\n        if (complete == 0){\n            toggle = 1;\n        } else if (complete == 1){\n            toggle = 0;\n        }\n\n        if (complete){\n            fetch('http://localhost:3000/TaskComplete', {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    onProject_identifier,\n                    id: id,\n                    complete: toggle\n                })\n            })\n                .then(response => response.json())\n                .then(Tasks => {\n                    var clickedTask = Tasks.find(\n                        (Task) => {\n                            if(Task.id === id){\n                                return Task;\n                            }\n                            return false;\n                        }\n                    )\n    \n                    this.setState({Tasks});\n                    this.setState({clickedTask})\n                })\n        } else {\n            return false;\n        }\n    }\n\n    //function of filtering tasks by input keyword\n    filterText = (e) => {\n        var filterInput = e.target.value;\n        this.setState({ filterText: filterInput })\n    }\n\n    render(){\n        return (\n            <div className='Window'>\n                <div className='Project-Panel'>\n                    <div className='User'>Hi, {this.props.user.name}</div>\n                    <div className='NewProject'>\n                        <button onClick={this.AddNewProject} id='NewProjectBtn'>New Project</button>\n                    </div>\n                    <ProjectList \n                        user={this.props.user}\n                        projectlist={this.state.projectlist}\n                        validIsAdmin={this.validIsAdmin}\n                        loadTask={this.loadTask} \n                        handleProject={this.handleProject}\n                    />\n                </div>\n                <div className='AddMember'>\n                    <AddProjectMember\n                        user={this.props.user}\n                        onProject_identifier={this.state.project_identifier}\n                        onProject_isAdmin={this.state.onProject_isAdmin}\n                    />\n                </div>\n                <div className='SignOut'>\n                    <SignOut onRouteChange={this.props.onRouteChange}/>\n                </div>\n                    <div className='TaskListDiv'>\n                        <header className='Tasks-header-table'>                    \n                            <button className='addBtn' onClick={this.handleAddEvent.bind(this)}>New Task</button>\n                            <button className='sectionBtn' onClick={this.handleAddSection.bind(this)}>New Section</button>\n                            <FilterBox filterText={this.filterText}/>\n                        </header>\n                        <div className='Tasks'>\n                            <Tasks\n                                Tasks={this.state.Tasks} \n                                onTaskUpdate={this.handleTask.bind(this)} \n                                onTaskInfo={this.getInfo.bind(this)}\n                                filterText={this.state.filterText}\n                            />\n                        </div>\n                    </div>  \n                    <div className='TaskInfo'>\n                        <header className='TaskInfo-header-table'>\n                            <MarkBtn \n                                clickedTask={this.state.clickedTask} \n                                toggleTaskComplete={this.toggleTaskComplete.bind(this)}\n                                />\n                        </header>\n                        <TaskInfo \n                            clickedTask={this.state.clickedTask}\n                            onTaskUpdate={this.handleTask.bind(this)}\n                            onHandleDescription={this.onHandleDescription.bind(this)}\n                        />\n                    </div>\n            </div>\n        )\n    }\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}